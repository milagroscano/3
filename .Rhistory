next
}                                          # el primer nombre e i no avanza
j = j + 1
print(lista_nueva)
}
rm(list = ls())
# genero la lista con 10 elementos
mi_lista = list(nombres = c("Milagros", "Alejandro", "Ezequiel", "Sol", "Belen", "Federico", "Martina", "Delfina", "Pablo", "Roma"))
# genero la funcion pedida
j = 1
lista_nueva = NULL
funcion = function(lista, letra) {
for (i in lista$nombres[j]) { # necesito saber por donde va a recorrer i
if (letra == (substr(lista$nombres[j], 1, 1))) {
lista_nueva = list(c(lista$nombres[c(j)]))  # algo debe estar mal aca porque solo me devuelve
}                                             # el primer nombre e i no avanza
j = j + 1
}
return(lista_nueva)
}
funcion(mi_lista, "M")
# genero la lista con 10 elementos
mi_lista = list(nombres = c("Milagros", "Alejandro", "Ezequiel", "Sol", "Belen", "Federico", "Martina", "Delfina", "Pablo", "Roma"))
# genero la funcion pedida
j = 1
funcion = function(lista, letra) {
for (i in lista$nombres[j]) { # necesito saber por donde va a recorrer i
if (letra == (substr(lista$nombres[j], 1, 1))) {
lista_nueva = list(c(lista$nombres[c(j)]))  # algo debe estar mal aca porque solo me devuelve
}                                             # el primer nombre e i no avanza
j = j + 1
}
return(lista_nueva)
}
funcion(mi_lista, "M")
funcion(mi_lista, "A")
rm(list = ls())
# genero la lista con 10 elementos
mi_lista = list(nombres = c("Milagros", "Alejandro", "Ezequiel", "Sol", "Belen", "Federico", "Martina", "Delfina", "Pablo", "Roma"))
# genero la funcion pedida
j = 1
funcion = function(lista, letra) {
for (i in lista$nombres[j]) { # necesito saber por donde va a recorrer i
if (letra == (substr(lista$nombres[j], 1, 1))) {
lista_nueva = list(c(lista$nombres[c(j)]))  # algo debe estar mal aca porque solo me devuelve
}                                             # el primer nombre e i no avanza
j = j + 1
}
return(lista_nueva)
}
funcion(mi_lista, "A")
funcion = function(lista, letra) {
for (i in lista$nombres[j]) { # necesito saber por donde va a recorrer i
if (letra == (substr(lista$nombres[j], 1, 1))) {
lista_nueva = list(c(lista$nombres[j], lista_nueva))  # algo debe estar mal aca porque solo me devuelve
}                                             # el primer nombre e i no avanza
j = j + 1
}
return(lista_nueva)
}
funcion(mi_lista, "A")
funcion(mi_lista, "M")
lista_nueva = list()
funcion = function(lista, letra) {
for (i in lista$nombres[j]) { # necesito saber por donde va a recorrer i
if (letra == (substr(lista$nombres[j], 1, 1))) {
lista_nueva = list(c(lista$nombres[j], lista_nueva))  # algo debe estar mal aca porque solo me devuelve
}                                             # el primer nombre e i no avanza
j = j + 1
}
return(lista_nueva)
}
funcion(mi_lista, "M")
lista_nueva = list()
funcion = function(lista, letra) {
for (i in lista$nombres[j]) { # necesito saber por donde va a recorrer i
if (letra == (substr(lista$nombres[j], 1, 1))) {
lista_nueva = list(c(lista$nombres[j]))  # algo debe estar mal aca porque solo me devuelve
}                                             # el primer nombre e i no avanza
j = j + 1
}
return(lista_nueva)
}
funcion(mi_lista, "M")
for (i in lista$nombres[j]) { # necesito saber por donde va a recorrer i
print(i)                                          # el primer nombre e i no avanza
j = j + 1
}
for (i in mi_lista$nombres[j]) { # necesito saber por donde va a recorrer i
print(i)                                          # el primer nombre e i no avanza
j = j + 1
}
length(mi_lista$nombres)
for (i in mi_lista$nombres[j]:length(mi_lista$nombres)) { # necesito saber por donde va a recorrer i
print(i)                                          # el primer nombre e i no avanza
j = j + 1
}
for (i in mi_lista$nombres[1]:mi_lista$nombres[10]) { # necesito saber por donde va a recorrer i
print(i)                                          # el primer nombre e i no avanza
j = j + 1
}
mi_lista$nombres[1]:mi_lista$nombres[10]
mi_lista$nombres[1]
mi_lista$nombres[10]
for (i in (mi_lista$nombres[1]):(mi_lista$nombres[10])) { # necesito saber por donde va a recorrer i
print(i)                                          # el primer nombre e i no avanza
j = j + 1
}
for (i in mi_lista$nombres[j]) { # necesito saber por donde va a recorrer i
print(i)                                          # el primer nombre e i no avanza
j = j + 1
}
# genero la funcion pedida
j = 1
for (i in mi_lista$nombres[j]) { # necesito saber por donde va a recorrer i
print(i)                                          # el primer nombre e i no avanza
j = j + 1
}
for (i in mi_lista$nombres[j]) { # necesito saber por donde va a recorrer i                                         # el primer nombre e i no avanza
j = j + 1
print(i)
}
# genero la funcion pedida
j = 1
for (i in mi_lista$nombres[j]) { # necesito saber por donde va a recorrer i                                         # el primer nombre e i no avanza
j = j + 1
print(i)
}
setwd("C:/LIANA/Escritorio/LicAtmosfera/Laboratorio de Procesamiento de Información Meteorológica/2C 2023/Clases Pract/Practica_3/")
rm(list = ls())
setwd("C:/LIANA/Escritorio/LicAtmosfera/Laboratorio de Procesamiento de Información Meteorológica/2C 2023/Clases Pract/Practica_3/")
archivo = read.table("presiondesaturacion.txt")
head(archivo)
tail(archivo)
View(archivo)
# le pongo nombre a las columnas del archivo
names(archivo) = c(Temperatura, Presion_de_Sat)
# le pongo nombre a las columnas del archivo
names(archivo) = c("Temperatura", "Presion_de_Sat")
length(temperaturas)
# le pongo nombre a las columnas del archivo
names(archivo) = c("Temperatura", "Presion_de_Sat")
# defino un vector para las temperaturas del archivo
temperaturas = archivo$Temperatura
presiones = archivo$Presion_de_Sat
length(temperaturas)
length(presiones)
which(temperaturas==23.3)
presiones[which(temperaturas==23.3)]
archivo[106,]
funcion = function(temperatura) {
for (i in temperaturas) {
if (i == temperatura) {
presion_sat = presiones[which(temperaturas==i)]
}
}
return(presion_sat)
}
funcion(23.3)
funcion(23.4)
funcion = function(temperatura) {
for (i in temperaturas) {
if (i == temperatura) {
presion_sat = presiones[which(temperaturas==i)]
} else {
print("El valor de temperatura ingresado no se encuentra en el archivo de datos")
}
}
return(presion_sat)
}
funcion(23.3)
funcion(23.4)
funcion(23.9)
funcion = function(temperatura) {
for (i in temperaturas) {
if (i == temperatura) {
presion_sat = presiones[which(temperaturas==i)]
}
}
return(presion_sat)
}
funcion(23.9)
funcion = function(temperatura) {
if(!is.numeric(temperatura)) stop("temperatura no es numérico")
for (i in temperaturas) {
if (i == temperatura) {
presion_sat = presiones[which(temperaturas==i)]
}
}
return(presion_sat)
}
funcion(j)
funcion("ld")
# la funcion funciona correctamente siempre y cuando se le ingrese un dato de temperatura que esté
# en el archivo, si la temperatura no es correcta tira error pues presion_sat not found
funcion(0)
# la funcion funciona correctamente siempre y cuando se le ingrese un dato de temperatura que esté
# en el archivo, si la temperatura no es correcta tira error pues presion_sat not found
funcion(0.6)
temperaturas[1]
temperaturas[length(temperaturas)]
funcion = function(temperatura) {      # COMO HAGO PARA DETERMINAR LOS INTERVALOS DE TEMP ?? *
if(!is.numeric(temperatura)) stop("temperatura no es numérico")
if (temperatura < temperaturas[1] | temperatura > temperaturas[length(temperaturas)]) {
print("El valor de temperatura ingresado no esta dentro del rango de datos del archivo")
}
for (i in temperaturas) {
if (i == temperatura) {
presion_sat = presiones[which(temperaturas==i)]
}
}
return(presion_sat)
}
# la funcion funciona correctamente siempre y cuando se le ingrese un dato de temperatura que esté
# en el archivo, si la temperatura no es correcta tira error pues presion_sat not found
funcion(0.6)
# la funcion funciona correctamente siempre y cuando se le ingrese un dato de temperatura que esté
# en el archivo, si la temperatura no es correcta tira error pues presion_sat not found
funcion(50)
# la funcion funciona correctamente siempre y cuando se le ingrese un dato de temperatura que esté
# en el archivo, si la temperatura no es correcta tira error pues presion_sat not found
funcion(-50)
rm(list = ls())
setwd("C:/LIANA/Escritorio/LicAtmosfera/Laboratorio de Procesamiento de Información Meteorológica/2C 2023/Clases Pract/Practica_3/")
load("tmediaEF.RData")
getwd()
load("t_media_EF.RData")
View(estaciones)
estaciones
estaciones[,2]
lenght(estaciones[,2])
length(estaciones[,2])
length(estaciones[1,2])
length(estaciones[,[2]])
length(estaciones$aux)
length(estaciones$aux[2])
length(estaciones$aux[,2])
estaciones[,2]
length(estaciones[,2])
length(estaciones[1,])
length(estaciones[[2]])
estaciones[[2]]
estaciones[[,2]]
names(estaciones) = c("estacion", "enero", "febrero")
estaciones
rm(list = ls())
setwd("C:/LIANA/Escritorio/LicAtmosfera/Laboratorio de Procesamiento de Información Meteorológica/2C 2023/Clases Pract/Practica_3/")
load("t_media_EF.RData")
estaciones
colnames(estaciones) = c("estacion", "enero", "febrero")
estaciones
View(estaciones)
estaciones["enero"]
estaciones[2]
estaciones[[2]]
estaciones[,2]
estaciones[1,2]
febrero = estaciones[,3]
estaciones[,3]
estaciones[,1]
estaciones[,[1]]
estaciones[[1]]
estaciones[,1]
row.names(estaciones) = c(estaciones[,1])
estaciones[,3]
estaciones[,3[1]]
estaciones[,[3]]
estaciones[,[1]]
estaciones[[3]]
estaciones[[(,3)]]
$Rosarii
$Rosario
estaciones$Rosario
estaciones["Rosario"]
estaciones[[(,3)]]
estaciones[,[3]]
estaciones[[3]]
estaciones[,3]
estaciones[,3][1]
media_BsAs = mean(estaciones[,3][1])
media_BsAs = mean(estaciones[,3][[1]])
estaciones[,3][[1]]
desvio_BsAs = sd(febrero[[1]])
mean(febrero[[1]])
media_BsAs = mean(febrero[[1]])
febrero[[2]]
media_vied = mean(febrero[[2]])
desvio_vied = sd(febrero[[2]])
media_ros = mean(febrero[[3]])
desvio_ros = sd(febrero[[3]])
media_sl = mean(febrero[[4]])
desvio_sl = sd(febrero[[4]])
media_res = mean(febrero[[5]])
desvio_res = sd(febrero[[5]])
febrero[[1]]
anios = c()
for (i in febrero[[1]]) {
if (i > media_BsAs) {
anios = c(which(i))
print(paste("La temperatura estuvo por encima de la media en los siguientes años:", anios))
}
}
for (i in febrero[[1]]) {
if (i > media_BsAs) {
anios = c(which[i])
print(paste("La temperatura estuvo por encima de la media en los siguientes años:", anios))
}
}
febrero[[1]]
which(febrero[[1]][24.28600])
febrero[[1]][which(24.28600)]
febrero[[1]][24.28600]
febrero[[1]][which(febreo[[1]]==24.28600)]
febrero[[1]][which(febrero[[1]]==24.28600)]
febrero[[1]][which(febrero[[1]]==24.28600)]
which(febreo[[1]]==24.28600)
which(febrero[[1]]==24.28600)
which(febrero[[1]][24.28600]==24.28600)
febrero[[1]]
febrero[[1]][1]
length(febrero[[1]])
anios = c()
for (i in febrero[[1]]) {
for (j in 1:length(febrero[[1]])) {
if (i > media_BsAs) {
anios = c(which(febrero[[1]][j]==i))
print(paste("La temperatura estuvo por encima de la media en los siguientes años:", anios))
}
}
}
anios = c()
for (i in febrero[[1]]) {
for (j in 1:length(febrero[[1]])) {
if (i > media_BsAs) {
anios = c(which(febrero[[1]][j]==i))
}
}
}
anios
anios = c()
for (i in febrero[[1]]) {
for (j in 1:length(febrero[[1]])) {
if (i > media_BsAs) {
anios = which(febrero[[1]][j]==i)
}
}
}
anios = c()
for (i in febrero[[1]]) {
for (j in 1:length(febrero[[1]])) {
if (i > media_BsAs) {
anios = c(anios, which(febrero[[1]][j]==i))
}
}
}
anios
febrero[[1]]
anios = c()
for (i in febrero[[1]]) {
for (j in 1:length(febrero[[1]])) {
if (i > media_BsAs) {
anios = c(anios, which(febrero[[1]][j]==i))
} else {
next
}
}
}
anios = c()
for (j in 1:length(febrero[[1]])) {
for (i in febrero[[1]]) {
if (i > media_BsAs) {
anios = c(anios, which(febrero[[1]][j]==i))
} else {
next
}
}
}
anios = c()
for (j in 1:length(febrero[[1]])) {
for (i in febrero[[1]]) {
if (i > media_BsAs) {
anios = c(anios, which(febrero[[1]][j]==i))
print(anios)
} else {
next
}
}
}
febrero[[1]][1] == 23.10982
febrero[[1]][1]
febrero[[1]][1] == 23.10982
febrero[[1]][1] == as.numeric(23.10982)
febrero[[1]][1] == as.integer(23.10982)
class(febrero[[1]][1])
febrero[[1]][1] == as.numeric(23.10982)
febrero[[1]][1] == 23.10982
febrero[[1]][31]
febrero[[1]][31] == 20.52703
febrero[[1]][31] == "20.52703"
febrero[[1]][31] == i
febrero[[1]][31L] == i
which(febrero[[1]][31L] == i)
febrero[which(febrero[[1]][31L] == i)]
febrero[1]
febrero[1][which(febrero[[1]][31L] == i)]
febrero[[1]][which(febrero[[1]][31L] == i)]
which(i > media_BsAs)
febrero[which(febrero[[1]]> media_BsAs)]
which(febrero[[1]]> media_BsAs)
febrero[[1]]
anios = c(1.982:2.012)
length(anios)
anios = c(1982:2012)
length(anios)
anios[posiciones]
for (k in febrero[[1]]) {
posiciones = which(febrero[[1]]> media_BsAs)
}
anios[posiciones]
print(paste("La temperatura estuvo por encima de la media en los siguientes años:", anios))
print(paste("La temperatura estuvo por encima de la media en los siguientes años:", c(anios)))
anios[posiciones]
anios_x_encima = anios[posiciones]
print(paste("La temperatura estuvo por encima de la media en los siguientes años:", anios_x_encima))
print(paste("La temperatura estuvo por encima de la media en los siguientes años:", c(anios_x_encima)))
anios_x_encima
anios_x_encima = c(anios[posiciones])
anios_x_encima
print(paste("Para la estacion de Buenos Aires la temperatura estuvo por encima de la media en los siguientes años:", anios_x_encima))
c(febrero[[1]], febrero[[2]], febrero[[3]], febrero[[4]], febrero[[5]])
funcion = function(vector) {
rango = range(vector)
mediana = median(vector)
return(rango, mediana)
}
estaciones[,2]
enero = estaciones[,2]
datos_enero = c(enero[[1]], enero[[2]], enero[[3]], enero[[4]], enero[[5]])
length(datos_enero)
31*5
funcion(datos_enero)
funcion = function(vector) {
rango = range(vector)
mediana = median(vector)
return(rango)
return(mediana)
}
funcion(datos_enero)
max(datos_enero)-min(datos_enero)
a = c(1, 4, 7, -3)
range(a)
30-164802-8.950593
30.164802-8.950593
median(datos_enero)
funcion = function(vector) {
rango = max(vector) - min(vector)
mediana = median(vector)
return(rango)
return(mediana)
}
funcion(datos_enero)
funcion = function(vector) {
rango = max(vector) - min(vector)
mediana = median(vector)
return(rango) ; return(mediana)
}
funcion(datos_enero)
funcion = function(vector) {
rango = max(vector) - min(vector)
mediana = median(vector)
return(rango; mediana)
funcion = function(vector) {
rango = max(vector) - min(vector)
mediana = median(vector)
return(rango, mediana)
}
funcion(datos_enero)
matriz = matrix(data = resultados, nrow = 2, ncol = 5)
resultados = funcion(datos_enero)
matriz = matrix(data = resultados, nrow = 2, ncol = 5)
funcion = function(vector) {
rango = max(vector) - min(vector)
mediana = median(vector)
return(rango, mediana)      # COMO HAGO PARA QUE ME RETORNE AMBOS RESULTADOS ??
}
enero = estaciones[,2]
datos_enero = c(enero[[1]], enero[[2]], enero[[3]], enero[[4]], enero[[5]])
resultados = funcion(datos_enero)
funcion = function(vector) {
rango = max(vector) - min(vector)
mediana = median(vector)
return(rango)      # COMO HAGO PARA QUE ME RETORNE AMBOS RESULTADOS ??
}
funcion(enero)
funcion(enero[[1]])
max(enero[[1]])-min(enero[[1]])
vec = c(1:7)
mat = matrix(data = vec, nrow = 4)
vec = c(1:8)
mat = matrix(data = vec, nrow = 4)
mat
row.names(mat) = c("a", "b", "c", "d")
mat
colnames(mat) = c("e", "f")
mat
estaciones[,1]
colnames(matriz) = c(estaciones[,1])
vec = c(1:40)
vec = c(1:40)
mat = matrix(data = vec, ncol = 5)
colnames(mat) = c(estaciones[,1])
mat
